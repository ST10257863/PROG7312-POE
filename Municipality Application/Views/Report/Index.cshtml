@{
    ViewData["Title"] = "Report Issue - MunicipalConnect";
}

<div class="container mt-4">
    <h1 class="mb-4">Report an Issue</h1>
    <div class="row">
        <div class="col-md-8">
            <form asp-action="Create" method="post" enctype="multipart/form-data">
                <div class="mb-3">
                    <label for="Address" class="form-label"><i class="bi bi-geo-alt"></i> Location</label>
                    <input type="text" class="form-control" id="Address" name="Address" placeholder="Enter street address, landmark, or area description" required>
                </div>

                @if (string.IsNullOrEmpty(ViewBag.GoogleMapsApiKey as string))
                {
                    <div class="alert alert-warning">
                        Location autocomplete is currently unavailable. Please enter your address manually.
                    </div>
                }

                <div class="mb-3">
                    <label for="CategoryId" class="form-label"><i class="bi bi-list"></i> Issue Category</label>
                    <select class="form-select" id="CategoryId" name="CategoryId" required>
                        <option value="" selected disabled>Select a category</option>
                        <option value="1">Roads</option>
                        <option value="2">Water</option>
                        <option value="3">Electricity</option>
                        <option value="4">Sanitation</option>
                        <option value="5">Other</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label for="Description" class="form-label"><i class="bi bi-file-text"></i> Issue Description</label>
                    <textarea class="form-control" id="Description" name="Description" rows="4" placeholder="Please provide detailed information about the issue..." required></textarea>
                </div>

                <div class="mb-3">
                    <p class="mb-2">Would you like to be notified of updates on this report?</p>
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" id="emailCheck" name="emailCheck">
                        <label class="form-check-label" for="emailCheck">Notify me by email</label>
                    </div>

                    <div id="emailField" style="display: none;">
                        <div class="mb-3">
                            <label for="email" class="form-label"><i class="bi bi-envelope"></i> Email</label>
                            <input type="email" class="form-control" id="email" name="email" placeholder="Enter your email address">
                        </div>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" id="phoneCheck" name="phoneCheck">
                        <label class="form-check-label" for="phoneCheck">Notify me by phone</label>
                    </div>
                </div>

                <div id="phoneField" style="display: none;">
                    <div class="mb-3">
                        <label for="phoneNumber" class="form-label"><i class="bi bi-telephone"></i> Phone Number</label>
                        <input type="tel" class="form-control" id="phoneNumber" name="phoneNumber" placeholder="Enter your phone number">
                    </div>
                </div>

                <div class="mb-3">
                    <label for="files" class="form-label"><i class="bi bi-paperclip"></i> Attach Files (Optional)</label>
                    <div class="border rounded p-3 text-center" id="dropzone" style="height: 140px; margin: auto;">
                        <input type="file" id="files" name="files" multiple class="d-none">
                        <i class="bi bi-cloud-upload fs-1 mb-2"></i>
                        <p class="mb-0">Click to upload or drag and drop</p>
                        <small class="text-muted">Photos, documents (Max 5MB each)</small>
                    </div>
                    <div id="file-list" class="mt-2" style="min-height: 120px; max-height: 160px"></div>
                </div>

                <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-primary" style="height: 56px"><i class="bi bi-send"></i> Submit Issue Report</button>
                </div>
            </form>
        </div>
        <div class="col-md-4">
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title"><i class="bi bi-info-circle"></i> Reporting Tips</h5>
                    <ul class="list-unstyled">
                        <li><small>• Be as specific as possible with location details</small></li>
                        <li><small>• Include photos when possible for faster resolution</small></li>
                        <li><small>• You'll receive updates via email or SMS about your report status</small></li>
                        <li><small>• Emergency issues should be reported by calling 10111</small></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Google Maps Places Autocomplete for Address Field
         - Loads the Google Maps JavaScript API with the Places library using the API key from ViewBag.GoogleMapsApiKey.
         - On DOMContentLoaded, initializes the autocomplete feature for the Address input field.
         - Restricts autocomplete suggestions to geocoded locations within South Africa (country code 'za').
         - If the API key is not set, autocomplete is not available and a warning is shown to the user.
    -->
    @if (!string.IsNullOrEmpty(ViewBag.GoogleMapsApiKey as string))
    {
        <script src="https://maps.googleapis.com/maps/api/js?key=@ViewBag.GoogleMapsApiKey&libraries=places"></script>
        <script>
                // Initialize Google Places Autocomplete for the Address input field
            document.addEventListener('DOMContentLoaded', function () {
                var input = document.getElementById('Address');
                if (input && window.google && google.maps && google.maps.places) {
                    var autocomplete = new google.maps.places.Autocomplete(input, {
                        types: ['geocode'],
                        componentRestrictions: { country: 'za' } // Restrict to South Africa
                    });
                }
            });
        </script>
    }
    <script>
        // Maximum file size allowed for uploads (5MB)
        const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB

        // DOM elements for file upload and display
        const dropzone = document.getElementById('dropzone');
        const fileInput = document.getElementById('files');
        const fileList = document.getElementById('file-list');

        // Open file dialog when dropzone is clicked
        dropzone.addEventListener('click', () => fileInput.click());

        // Prevent default drag behaviors on dropzone
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropzone.addEventListener(eventName, preventDefaults, false);
        });

        // Prevent default and stop propagation for drag/drop events
        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        // Handle files dropped onto the dropzone
        dropzone.addEventListener('drop', handleDrop, false);

        // Handle files selected via file input
        fileInput.addEventListener('change', handleFileSelect, false);

        // Process files dropped onto the dropzone
        function handleDrop(e) {
            let dt = e.dataTransfer;
            let files = dt.files;
            handleFiles(files);
        }

        // Process files selected via file input
        function handleFileSelect(e) {
            let files = e.target.files;
            // Clear the display and input for new selection
            fileList.innerHTML = '';
            let dataTransfer = new DataTransfer();
            Array.from(files).forEach(file => {
                if (file.size > MAX_FILE_SIZE) {
                    alert(`File "${file.name}" exceeds the 5MB size limit and will not be added.`);
                    return;
                }
                dataTransfer.items.add(file);
                let fileSize = (file.size / 1024 / 1024).toFixed(2);
                let fileItem = document.createElement('div');
                fileItem.className = 'd-flex justify-content-between align-items-center mb-1';
                fileItem.innerHTML = `
                    <span><i class="bi bi-file-earmark"></i> ${file.name} (${fileSize} MB)</span>
                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeFile('${file.name}')">
                        <i class="bi bi-x"></i>
                    </button>
                `;
                fileList.appendChild(fileItem);
            });
            fileInput.files = dataTransfer.files;
        }

        // Add files to the file input and display list, enforcing size and duplicates
        function handleFiles(files) {
            let dataTransfer = new DataTransfer();
            // Add existing files already in the input
            Array.from(fileInput.files).forEach(f => dataTransfer.items.add(f));
            // Add new files from drop or selection
            Array.from(files).forEach(file => {
                if (!fileAlreadyAdded(file)) {
                    if (file.size > MAX_FILE_SIZE) {
                        alert(`File "${file.name}" exceeds the 5MB size limit and will not be added.`);
                        return;
                    }
                    dataTransfer.items.add(file);
                    let fileSize = (file.size / 1024 / 1024).toFixed(2); // Convert to MB
                    let fileItem = document.createElement('div');
                    fileItem.className = 'd-flex justify-content-between align-items-center mb-1';
                    fileItem.innerHTML = `
                        <span><i class="bi bi-file-earmark"></i> ${file.name} (${fileSize} MB)</span>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeFile('${file.name}')">
                            <i class="bi bi-x"></i>
                        </button>
                    `;
                    fileList.appendChild(fileItem);
                }
            });
            fileInput.files = dataTransfer.files;
        }

        // Check if a file is already in the display list
        function fileAlreadyAdded(file) {
            return Array.from(fileList.children).some(item => item.textContent.includes(file.name));
        }

        // Remove a file from the file input and display list
        function removeFile(fileName) {
            let newFileList = Array.from(fileInput.files).filter(file => file.name !== fileName);
            updateFileList(newFileList);

            // Remove the file item from the display
            let fileItems = fileList.children;
            for (let i = 0; i < fileItems.length; i++) {
                if (fileItems[i].textContent.includes(fileName)) {
                    fileItems[i].remove();
                    break;
                }
            }
        }

        // Update the file input with a new list of files
        function updateFileList(newFileList) {
            let dataTransfer = new DataTransfer();
            newFileList.forEach(file => {
                dataTransfer.items.add(file);
            });
            fileInput.files = dataTransfer.files;
        }

        // DOM elements for notification options and fields
        const emailCheck = document.getElementById('emailCheck');
        const phoneCheck = document.getElementById('phoneCheck');
        const emailField = document.getElementById('emailField');
        const phoneField = document.getElementById('phoneField');
        const emailInput = document.getElementById('email');
        const phoneInput = document.getElementById('phoneNumber');
        const form = document.querySelector('form');

        // Show/hide email field and set required attribute based on checkbox
        emailCheck.addEventListener('change', function() {
            emailField.style.display = this.checked ? 'block' : 'none';
            emailInput.required = this.checked;
        });

        // Show/hide phone field and set required attribute based on checkbox
        phoneCheck.addEventListener('change', function() {
            phoneField.style.display = this.checked ? 'block' : 'none';
            phoneInput.required = this.checked;
        });

        // Validate notification fields before form submission
        form.addEventListener('submit', function(e) {
            if (emailCheck.checked && emailInput.value.trim() === '') {
                e.preventDefault();
                alert('Please enter your email address for notifications.');
            }
            if (phoneCheck.checked && phoneInput.value.trim() === '') {
                e.preventDefault();
                alert('Please enter your phone number for notifications.');
            }
        });
    </script>
}